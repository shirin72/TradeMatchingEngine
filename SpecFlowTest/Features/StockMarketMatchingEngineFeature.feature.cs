// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StockMarketMatchingEngineFeature2Feature : object, Xunit.IClassFixture<StockMarketMatchingEngineFeature2Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StockMarketMatchingEngineFeature.feature"
#line hidden
        
        public StockMarketMatchingEngineFeature2Feature(StockMarketMatchingEngineFeature2Feature.FixtureData fixtureData, SpecFlowTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "StockMarketMatchingEngineFeature2", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Enqueue SellOrder")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketMatchingEngineFeature2")]
        [Xunit.TraitAttribute("Description", "Enqueue SellOrder")]
        [Xunit.InlineDataAttribute("0", "300", "15", "false", "2024-02-05", new string[0])]
        [Xunit.InlineDataAttribute("0", "400", "10", "false", "2024-02-05", new string[0])]
        [Xunit.InlineDataAttribute("0", "500", "10", "false", "2024-02-05", new string[0])]
        public virtual void EnqueueSellOrder(string sell, string price, string amount, string isFillAndKill, string expireTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Sell", sell);
            argumentsOfScenario.Add("Price", price);
            argumentsOfScenario.Add("Amount", amount);
            argumentsOfScenario.Add("IsFillAndKill", isFillAndKill);
            argumentsOfScenario.Add("ExpireTime", expireTime);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enqueue SellOrder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table1.AddRow(new string[] {
                            string.Format("{0}", sell),
                            string.Format("{0}", price),
                            string.Format("{0}", amount),
                            string.Format("{0}", isFillAndKill),
                            string.Format("{0}", expireTime)});
#line 7
 testRunner.Given("Order \'SellOrder\' Has Been Defined", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 testRunner.When("I Register The Order \'SellOrder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("Order \'SellOrder\' Should Be Enqueued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="TradeOrders")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketMatchingEngineFeature2")]
        [Xunit.TraitAttribute("Description", "TradeOrders")]
        [Xunit.InlineDataAttribute("1", "100", "5", "false", "2024-02-05 09:30:26.2080000", "2", "1", "5", "100", "0", new string[0])]
        public virtual void TradeOrders(string buy, string price, string amount, string isFillAndKill, string expireTime, string buyOrderId, string sellOrderId, string tradeAmount, string tradePrice, string modifiedAmount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Buy", buy);
            argumentsOfScenario.Add("Price", price);
            argumentsOfScenario.Add("Amount", amount);
            argumentsOfScenario.Add("IsFillAndKill", isFillAndKill);
            argumentsOfScenario.Add("ExpireTime", expireTime);
            argumentsOfScenario.Add("BuyOrderId", buyOrderId);
            argumentsOfScenario.Add("SellOrderId", sellOrderId);
            argumentsOfScenario.Add("TradeAmount", tradeAmount);
            argumentsOfScenario.Add("TradePrice", tradePrice);
            argumentsOfScenario.Add("ModifiedAmount", modifiedAmount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TradeOrders", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table2.AddRow(new string[] {
                            "0",
                            "100",
                            "5",
                            "false",
                            "2024-02-05 09:30:26.2080000"});
#line 24
 testRunner.Given("Order \'SellOrder\' Has Been Registerd", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table3.AddRow(new string[] {
                            string.Format("{0}", buy),
                            string.Format("{0}", price),
                            string.Format("{0}", amount),
                            string.Format("{0}", isFillAndKill),
                            string.Format("{0}", expireTime)});
#line 29
 testRunner.And("Order \'BuyOrder\' Has Been Defined", ((string)(null)), table3, "And ");
#line hidden
#line 33
 testRunner.When("I Register The Order \'BuyOrder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "BuyOrderId",
                            "SellOrderId",
                            "Amount",
                            "Price"});
                table4.AddRow(new string[] {
                            string.Format("{0}", buyOrderId),
                            string.Format("{0}", sellOrderId),
                            string.Format("{0}", tradeAmount),
                            string.Format("{0}", tradePrice)});
#line 36
 testRunner.Then("The following \'Trade\' will be created", ((string)(null)), table4, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table5.AddRow(new string[] {
                            string.Format("{0}", buy),
                            string.Format("{0}", price),
                            string.Format("{0}", modifiedAmount),
                            "false",
                            "2024-02-05 09:30:26.2080000"});
#line 41
 testRunner.And("Order \'BuyOrder\' Should Be Modified  like this", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="ModifyOrder")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketMatchingEngineFeature2")]
        [Xunit.TraitAttribute("Description", "ModifyOrder")]
        [Xunit.InlineDataAttribute("0", "1000", "1000", "false", "2024-02-05 09:30:26.2080000", new string[0])]
        public virtual void ModifyOrder(string sell, string price, string amount, string isFillAndKill, string expireTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Sell", sell);
            argumentsOfScenario.Add("Price", price);
            argumentsOfScenario.Add("Amount", amount);
            argumentsOfScenario.Add("IsFillAndKill", isFillAndKill);
            argumentsOfScenario.Add("ExpireTime", expireTime);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ModifyOrder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table6.AddRow(new string[] {
                            string.Format("{0}", sell),
                            string.Format("{0}", price),
                            string.Format("{0}", amount),
                            string.Format("{0}", isFillAndKill),
                            string.Format("{0}", expireTime)});
#line 52
 testRunner.Given("Order \'SellOrder\' Has Been Registerd", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table7.AddRow(new string[] {
                            "0",
                            "1000",
                            "10",
                            "false",
                            "2024-02-05 09:30:26.2080000"});
#line 56
 testRunner.And("Order \'ModifiedOrder\' Has Been Defined", ((string)(null)), table7, "And ");
#line hidden
#line 60
 testRunner.When("I Modify The Order \'SellOrder\' to \'ModifiedOrder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("The order \'SellOrder\'  Should Be Found like \'ModifiedOrder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="CancelOrder")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketMatchingEngineFeature2")]
        [Xunit.TraitAttribute("Description", "CancelOrder")]
        [Xunit.InlineDataAttribute("0", "100", "5", "false", "2024-02-05 09:30:26.2080000", new string[0])]
        [Xunit.InlineDataAttribute("0", "200", "5", "false", "2024-02-05 09:30:26.2080000", new string[0])]
        [Xunit.InlineDataAttribute("0", "300", "5", "false", "2024-02-05 09:30:26.2080000", new string[0])]
        public virtual void CancelOrder(string sell, string price, string amount, string isFillAndKill, string expireTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Sell", sell);
            argumentsOfScenario.Add("Price", price);
            argumentsOfScenario.Add("Amount", amount);
            argumentsOfScenario.Add("IsFillAndKill", isFillAndKill);
            argumentsOfScenario.Add("ExpireTime", expireTime);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CancelOrder", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Side",
                            "Price",
                            "Amount",
                            "IsFillAndKill",
                            "ExpireTime"});
                table8.AddRow(new string[] {
                            string.Format("{0}", sell),
                            string.Format("{0}", price),
                            string.Format("{0}", amount),
                            string.Format("{0}", isFillAndKill),
                            string.Format("{0}", expireTime)});
#line 73
 testRunner.Given("Order \'SellOrder\' Has Been Registerd", ((string)(null)), table8, "Given ");
#line hidden
#line 81
 testRunner.When("I cancel \'SellOrder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then("The order \'SellOrder\'  Should Be Cancelled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StockMarketMatchingEngineFeature2Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StockMarketMatchingEngineFeature2Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
